#line 2 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.yy.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 57
#define YY_END_OF_BUFFER 58
static yyconst short int yy_acclist[279] =
    {   0,
       58,   49,   57,    1,   49,   57,    2,   57,   46,   49,
       57,   32,   49,   57,   33,   49,   57,   41,   49,   57,
       40,   49,   57,   31,   49,   57,   30,   49,   57,   41,
       49,   57,   43,   49,   57,   38,   49,   57,   36,   49,
       57,   39,   49,   57,   39,   49,   57,   39,   49,   57,
       34,   49,   57,   35,   49,   57,   42,   45,   49,   57,
       42,   45,   49,   57,   42,   45,   49,   57,   42,   45,
       49,   57,   42,   45,   49,   57,   42,   45,   49,   57,
       42,   45,   49,   57,   42,   45,   49,   57,   42,   45,
       49,   57,   42,   45,   49,   57,   42,   45,   49,   57,

       42,   45,   49,   57,   42,   45,   49,   57,   42,   45,
       49,   57,   42,   45,   49,   57,   42,   45,   49,   57,
       42,   45,   49,   57,   48,   49,   57,   53,   57,   52,
       57,   56,   57,   54,   57,   55,   56,   57,   51,   57,
       50,   57,   50,   51,   57,    1,    2,   29,   47,   43,
       37,   39,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   22,   42,   42,   42,   42,   42,   17,   42,   42,
       42,   42,    8,   42,   40,   42,   42,   42,   42,   26,
       42,   42,   42,   42,   54,   44,   41,   42,   42,   42,
       42,   42,   42,   42,   42,   42,    6,   42,   25,   42,

       42,   42,   28,   42,   42,   42,   42,   42,   42,   42,
       13,   42,   42,   42,   42,   42,   20,   42,   12,   42,
       42,   42,   19,   42,   42,   42,   42,   42,   10,   42,
       42,   42,   18,   42,   42,   42,    7,   42,   16,   42,
       42,    4,   42,   42,   42,   42,   42,   42,   42,   42,
       24,   42,   21,   42,   42,   27,   42,   42,   42,   42,
       42,    5,   42,   23,   42,   11,   42,   42,    9,   42,
       42,    3,   42,   14,   42,   42,   15,   42
    } ;

static yyconst short int yy_accept[163] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        4,    7,    9,   12,   15,   18,   21,   24,   27,   30,
       33,   36,   39,   42,   45,   48,   51,   54,   57,   61,
       65,   69,   73,   77,   81,   85,   89,   93,   97,  101,
      105,  109,  113,  117,  121,  125,  128,  130,  132,  134,
      136,  139,  141,  143,  146,  147,  148,  149,  150,  150,
      151,  152,  153,  154,  155,  156,  157,  158,  159,  160,
      161,  162,  164,  165,  166,  167,  168,  170,  171,  172,
      173,  175,  177,  178,  179,  180,  182,  183,  184,  185,
      186,  187,  189,  190,  191,  192,  193,  194,  195,  196,

      197,  199,  201,  202,  203,  205,  206,  207,  208,  209,
      210,  211,  213,  214,  215,  216,  217,  219,  221,  222,
      223,  225,  226,  227,  228,  229,  231,  232,  233,  235,
      236,  237,  239,  241,  242,  244,  245,  246,  247,  248,
      249,  250,  251,  253,  255,  256,  258,  259,  260,  261,
      262,  264,  266,  268,  269,  271,  272,  274,  276,  277,
      279,  279
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    1,    1,    1,    4,    5,
        6,    7,    8,    9,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,   16,
       17,   18,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       19,    1,   20,    1,    1,    1,   21,   22,   23,   24,

       25,   26,   27,   28,   29,   30,   30,   31,   32,   33,
       34,   35,   30,   36,   37,   38,   39,   40,   41,   30,
       42,   30,   43,    1,   44,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[45] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    1,    1,    1,    1,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    1,    1
    } ;

static yyconst short int yy_base[168] =
    {   0,
        0,    0,  177,  176,   42,   43,   44,   46,  178,  181,
      175,    0,  181,  181,  181,  181,  181,  181,  165,  163,
       40,  157,  181,   37,  181,  156,  181,  181,   23,   27,
       36,   29,   29,   32,    0,   39,  138,  137,   41,  134,
      144,   40,  135,  146,  138,  181,  181,  181,  181,    0,
      181,  181,  181,  181,  163,    0,  181,  181,  151,   62,
      181,  181,    0,  139,  126,  134,  129,  122,  137,  124,
      116,  114,  117,  129,  116,  118,    0,  112,  125,  110,
        0,    0,  113,   55,  121,    0,  107,  108,  114,    0,
      129,    0,  120,  111,  108,  113,  101,   99,  102,  109,

        0,    0,  110,  107,    0,   56,  100,   96,  104,   95,
       98,    0,   95,   83,   91,   98,    0,    0,   84,   83,
        0,   82,   92,   93,   81,    0,   80,   94,    0,   83,
       88,    0,    0,   91,    0,   77,   81,   84,   84,   86,
       82,   66,    0,    0,   68,    0,   55,   52,   46,   52,
        0,    0,    0,   49,    0,   45,    0,    0,   55,    0,
      181,   90,   93,   96,   99,   66,  102
    } ;

static yyconst short int yy_def[168] =
    {   0,
      161,    1,  162,  162,  163,  163,  164,  164,  161,  161,
      161,  165,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  161,  161,  161,  161,  167,
      161,  161,  161,  161,  161,  165,  161,  161,  161,  161,
      161,  161,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  167,
      161,  166,  166,  166,  166,  166,  166,  166,  166,  166,

      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
        0,  161,  161,  161,  161,  161,  161
    } ;

static yyconst short int yy_nxt[226] =
    {   0,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   17,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   35,   36,   35,
       35,   37,   38,   39,   40,   41,   35,   42,   43,   44,
       45,   35,   46,   10,   50,   50,   53,   54,   53,   54,
       59,   66,   60,   62,   62,   64,   68,   71,   65,   73,
       67,   74,   72,   69,   77,   75,   81,   85,   63,   70,
       76,   78,   59,   86,   60,  107,   82,  108,  124,  160,
      159,  158,  125,  157,  156,   51,   51,  155,  154,  109,
       47,   47,   47,   49,   49,   49,   52,   52,   52,   56,

      153,   56,   90,  152,   90,  151,  150,  149,  148,  147,
      146,  145,  144,  143,  142,  141,  140,  139,  138,  137,
      136,  135,  134,  133,  132,  131,  130,  129,  128,  127,
      126,  123,  122,  121,  120,  119,  118,  117,  116,  115,
      114,   91,  113,  112,  111,  110,  106,  105,   92,  104,
      103,  102,  101,  100,   99,   92,   98,   97,   96,   95,
       94,   93,   92,   91,   55,   89,   88,   87,   84,   83,
       80,   79,   62,   61,   58,   57,   55,  161,   48,   48,
        9,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,

      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161
    } ;

static yyconst short int yy_chk[226] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    5,    6,    7,    7,    8,    8,
       21,   30,   21,   24,   24,   29,   31,   32,   29,   33,
       30,   33,   32,   31,   36,   34,   39,   42,  166,   31,
       34,   36,   60,   42,   60,   84,   39,   84,  106,  159,
      156,  154,  106,  150,  149,    5,    6,  148,  147,   84,
      162,  162,  162,  163,  163,  163,  164,  164,  164,  165,

      145,  165,  167,  142,  167,  141,  140,  139,  138,  137,
      136,  134,  131,  130,  128,  127,  125,  124,  123,  122,
      120,  119,  116,  115,  114,  113,  111,  110,  109,  108,
      107,  104,  103,  100,   99,   98,   97,   96,   95,   94,
       93,   91,   89,   88,   87,   85,   83,   80,   79,   78,
       76,   75,   74,   73,   72,   71,   70,   69,   68,   67,
       66,   65,   64,   59,   55,   45,   44,   43,   41,   40,
       38,   37,   26,   22,   20,   19,   11,    9,    4,    3,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,

      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
#define INITIAL 0
#line 2 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"

#define LEXDEBUG



#include "main.h"
#include "yacc.tab.h"
#include "TokenTypeEnum.h"
#include <string>


//处理位置信息
int yycolumn = 1;
extern YYLTYPE yylloc;
#define YY_USER_ACTION yylloc.first_line = yylloc.last_line = yylineno ; \
    yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1; \
    yycolumn += yyleng;


extern string itos(int num);


string charRec; //保存字符常量
char lineBuffer[500]; //保存当前行的所有内容
vector<string> lexicalErrorInformation;
void addLexicalErrorInformation(char *word, string info, int l, int r);
bool CheckAndAddLengthTooLargeErrorInformation(char *text, string type, int l, int r);

extern YYSTYPE yylval;


//函数声明
extern "C"
{
	int yywrap();
    int yylex();
}
#define SCOM 1

#define MCOM 2

#define CH 3

#line 552 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.yy.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 69 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"

                  
#line 706 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.yy.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 162 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 181 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 71 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 73 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{ 
    if(CheckAndAddLengthTooLargeErrorInformation(yytext, "line", 1, yyleng))
        return 0;
    strcpy(lineBuffer,yytext+1);
    yycolumn=1;
    yyless(1); //yyleng是当前匹配的单词的长度,yyless(n)表示退回yyleng-n个字符，只保留n个字符
    }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 81 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
    yylval->val=yytext;
    yylval->token=Token::PROGRAM;
    yylval->lineNumber = yylineno;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << " Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return PROGRAM;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 93 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
    yylval->val=yytext;
    yylval->token=Token::CONST;
    yylval->lineNumber = yylineno;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return CONST;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 106 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
    yylval->val=yytext;
    yylval->token=Token::RECORD;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return RECORD;

}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 119 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
    yylval->val=yytext;
    yylval->token=Token::END;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return END;

}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 132 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
    yylval->val=yytext;
    yylval->token=Token::ARRAY;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return ARRAY;

}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 145 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
    yylval->val=yytext;
    yylval->token=Token::OF;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return OF;

}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 158 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
    yylval->val=yytext;
    yylval->token=Token::INTEGER;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return INTEGER;

}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 171 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
    yylval->val=yytext;
    yylval->token=Token::REAL;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return REAL;

}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 184 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
    yylval->val=yytext;
    yylval->token=Token::BOLLEAN;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return BOLLEAN;

}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 197 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
    yylval->val=yytext;
    yylval->token=Token::CHAR;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return CHAR;

}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 210 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
    yylval->val=yytext;
    yylval->token=Token::VAR;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return VAR;

}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 223 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
    yylval->val=yytext;
    yylval->token=Token::FUNCTION;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return FUNCTION;

}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 236 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
    yylval->val=yytext;
    yylval->token=Token::PROCEDURE;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return PROCEDURE;

}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 248 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
    yylval->val=yytext;
    yylval->token=Token::_BEGIN;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return _BEGIN;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 260 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
    yylval->val=yytext;
    yylval->token=Token::IF;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return IF;

}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 273 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
    yylval->val=yytext;
    yylval->token=Token::THEN;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return THEN;

}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 286 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
    yylval->val=yytext;
    yylval->token=Token::ELSE;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return ELSE;

}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 299 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
    yylval->val=yytext;
    yylval->token=Token::CASE;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return CASE;

}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 312 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
    yylval->val=yytext;
    yylval->token=Token::WHILE;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return WHILE;

}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 325 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
    yylval->val=yytext;
    yylval->token=Token::DO;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return DO;

}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 338 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
    yylval->val=yytext;
    yylval->token=Token::REPEAT;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return REPEAT;

}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 351 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
    yylval->val=yytext;
    yylval->token=Token::UNTIL;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return UNTIL;

}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 364 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
    yylval->val=yytext;
    yylval->token=Token::FOR;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return FOR;

}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 377 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
    yylval->val=yytext;
    yylval->token=Token::TO;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return TO;

}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 390 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
    yylval->val=yytext;
    yylval->token=Token::DOWNTO;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return DOWNTO;

}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 404 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
	yylval->val=yytext;
	yylval->token=Token::NOT;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return NOT;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 416 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
	yylval->val=yytext;
	yylval->token=Token::RANGE_DOT;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return RANGE_DOT;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 428 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
	yylval->val=yytext;
	yylval->token=Token::DOT;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return DOT;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 440 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
	yylval->val=yytext;
	yylval->token=Token::COMMA;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return COMMA;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 452 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
	yylval->val=yytext;
	yylval->token=Token::LEFT_PARENTHESES;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return LEFT_PARENTHESES;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 464 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
	yylval->val=yytext;
	yylval->token=Token::RIGHT_PARENTHESES;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return RIGHT_PARENTHESES;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 476 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
	yylval->val=yytext;
	yylval->token=Token::LEFT_MEDIUM_PARENTHESES;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return LEFT_MEDIUM_PARENTHESES;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 488 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
	yylval->val=yytext;
	yylval->token=Token::RIGHT_MEDIUM_PARENTHESES;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return RIGHT_MEDIUM_PARENTHESES;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 500 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
	yylval->val=yytext;
	yylval->token=Token::SEMICOLON;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return SEMICOLON;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 512 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
	yylval->val=yytext;
	yylval->token=Token::ASSIGNOP;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return ASSIGNOP;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 524 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
	yylval->val=yytext;
	yylval->token=Token::COLON;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("keyword: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "keyword: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return COLON;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 536 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
	yylval->val=yytext;
	yylval->token=Token::RELOP;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("RELOP: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "RELOP: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return RELOP;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 548 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
	yylval->val=yytext;
	yylval->token=Token::ADDOP;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("ADDOP: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "ADDOP: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return ADDOP;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 560 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
	yylval->val=yytext;
	yylval->token=Token::MULOP;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("MULOP: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "MULOP: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return MULOP;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 576 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    if(CheckAndAddLengthTooLargeErrorInformation(yytext, "id", yycolumn-yyleng, yycolumn-1)){
        yytext[100]=0; //截断处理
        //yycolumn=yycolumn-yyleng;
        //yylloc.first_column=yycolumn;
        //yylloc.last_column=yycolumn+100-1;
        //yycolumn+=100;
        yyleng=100;
    }
    yylval=new ParseNode();
	yylval->val=yytext;
	yylval->token = Token::ID;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("ID: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "ID: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return ID;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 596 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
	yylval->val=yytext;
	yylval->token=Token::INT_NUM;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("INT_NUM: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "INT_NUM: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return NUM;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 608 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
    yylval->val=yytext;
    yylval->token=Token::FLOAT_NUM;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("FLOAT_NUM: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "FLOAT_NUM: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return NUM;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 620 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    yylval=new ParseNode();
    yylval->val=yytext;
    yylval->token=Token::LETTER;
    yylval->lineNumber = yylineno ;
    #ifdef LEXDEBUG
    //printf("LETTER: %s  Token: %s\n", yylval->val,yylval->token);
    cout << "LETTER: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
    #endif
    return LETTER;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 634 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{//进入字符常量识别
    BEGIN CH;
	charRec="";
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 639 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{//进入单行注释
    BEGIN SCOM;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 643 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{//进入多行注释
	BEGIN MCOM;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 647 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{//非法字符 错误3
    addLexicalErrorInformation(yytext, "Invalid character!", yycolumn-yyleng, yycolumn-1);
	//cout << "error: invalid char" << endl;
}
	YY_BREAK
case YY_STATE_EOF(CH):
#line 653 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{ //读取字符常量时遇到文件尾 错误4
    addLexicalErrorInformation(yytext, "Unexpected end of file when reading a char constant", yycolumn-yyleng, yycolumn-1);
    return 0;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 658 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{//字符常量限定在一行中
    int len = charRec.length();
    
    if(yytext[0]=='\'' && len==0){
        addLexicalErrorInformation(yytext, "Char constant missing!", yycolumn-yyleng-1, yycolumn-1); //错误5
        // 如果字符常量缺失，则返回空字符常量
        yylval = new ParseNode();
        yylval->val="\0";
        yylval->token=Token::CHAR;
        yylval->lineNumber=yylineno ;
        #ifdef LEXDEBUG
        //printf("CHAR: %s  Token: %s\n", yylval->val,yylval->token);
        cout << "CHAR: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
        #endif
        return CHAR;
    }
    else if(yytext[0]=='\'' && len==1){
        // 如果字符常量长度为1，则返回字符常量
        yylval = new ParseNode();
        yylval->val=charRec[0];
        yylval->token=Token::CHAR;
        yylval->lineNumber=yylineno ;
        #ifdef LEXDEBUG
        //printf("CHAR: %s  Token: %s\n", yylval->val,yylval->token);
        cout << "CHAR: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
        #endif
        return CHAR;
    }
    else if(yytext[0]=='\''){
        addLexicalErrorInformation(yytext, "Too many characters in a char constant!", yycolumn-yyleng-len, yycolumn-yyleng-1); //错误6
        // 如果字符常量长度不为0或1，则返回字符常量
        yylval = new ParseNode();
        yylval->val=charRec[0];
        yylval->token=Token::CHAR;
        yylval->lineNumber=yylineno ;
        #ifdef LEXDEBUG
        //printf("CHAR: %s  Token: %s\n", yylval->val,yylval->token);
        cout << "CHAR: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
        #endif
        return CHAR;
    }
    else{
        addLexicalErrorInformation(yytext, "Right quote missing!", yycolumn-yyleng-len+1, yycolumn-yyleng-len+1); //错误7
        // 如果字符常量缺少右引号，则退回换行符，行号减一，并返回字符常量
        yyless(0);//将换行符退回
        yylineno--;//行号减一
        
        yylval = new ParseNode();
        if(len==0)
            yylval->val="\0";
        else
            yylval->val=charRec[0];
        yylval->token=Token::CHAR;
        yylval->lineNumber=yylineno ;
        #ifdef LEXDEBUG
       // printf("CHAR: %s  Token: %s\n", yylval->val,yylval->token);
       cout << "CHAR: " << yylval->val << "Token: "<< yylval->token<<" lineNumber: "<<yylval->lineNumber<<endl;
        #endif
        return CHAR;
    }
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 720 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
	charRec+=yytext[0];
}
	YY_BREAK
case YY_STATE_EOF(SCOM):
#line 724 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{ //单行注释遇到文件尾
    return 0;
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 728 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    BEGIN INITIAL;
    yyless(0);//将换行符退回
	yylineno--;//行号减一
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 734 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{}
	YY_BREAK
case YY_STATE_EOF(MCOM):
#line 736 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{ //多行注释遇到文件尾 错误8
    addLexicalErrorInformation(yytext, "Unexpected end of file when reading a multiple line comment, lacking of a right brace", yycolumn-yyleng, yycolumn-1);
    return 0;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 741 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
    if(CheckAndAddLengthTooLargeErrorInformation(yytext, "line", 1, yyleng)) //行长度超过限制
        return 0;
    yycolumn=1;
    strcpy(lineBuffer, yytext+1);
    yyless(1);
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 749 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{
	BEGIN INITIAL;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 753 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
{}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 754 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"
ECHO;
	YY_BREAK
#line 1652 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.yy.cc"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 162 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 162 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 161);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 754 "C:/Users/gllx/Desktop/dasanxia/byyl/work/Pascal-S-Compiler/build/../src/lex.l"




//这个函数是必须的，不用动
int yywrap()
{
	return 1;
}

void addLexicalErrorInformation(char *word, string info, int l, int r){
    string errorInformation = "[" + info + "] " + itos(yylineno-1) + "." + itos(l) + "-" + itos(yylineno-1) + "." + itos(r) + "\n";
    errorInformation += string(lineBuffer) + "\n";
    for(int i=1;i<=l-1;i++)
        errorInformation+=" ";
    for(int i=l;i<=r;i++)
        errorInformation+="^";
    //cout << errorInformation << endl;
    lexicalErrorInformation.push_back(errorInformation);
}

bool CheckAndAddLengthTooLargeErrorInformation(char *text, string type, int l, int r){
    string errorInformation;
    int len=strlen(text);
    if(type=="line"){
        if(len>500){ //错误1
            errorInformation = "[Line length too large, exceed 500] " + itos(yylineno-1) + "." + itos(l) + "-" + itos(yylineno-1) + "." +itos(r); 
            errorInformation += "\nLex analyse abort!";
            //cout << errorInformation << endl;
            lexicalErrorInformation.push_back(errorInformation);
            return true;
        }
        return false;
    }
    else if(type=="id"){
        if(len>100){ //错误2
            string id = string(text);
            errorInformation = "[Identifier length too large, exceed 100] " + itos(yylineno-1) + "." + itos(l) + "-" + itos(yylineno-1) + "." + itos(r);
            //cout << errorInformation << endl;
            lexicalErrorInformation.push_back(errorInformation);
            return true;
        }
        return false;
    }
    else{
        cout << "[CheckAndAddLengthTooLargeErrorInformation] type not found" << endl;
        return false;
    }
}